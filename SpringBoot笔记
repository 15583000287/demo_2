navigate: https://blog.csdn.net/u011961421/article/details/79416510


Spring和SpringBoot的区别：
    虽然Spring组件的代码是轻量级的，但它的配置是重量级的。

SpringBoot的注解：
@SpringBootApplication   SpringBoot核心注解，开启自动配置，表示当前类是SpringBoot的的引导类
    包含以下注解：
    @Target(ElementType.TYPE)
    @Retention(RetentionPolicy.RUNTIME)
    @Documented   //表示生成文档的时候，包含注解注释
    @Inherited //表示被此注解注解的类，继承它父类的注解
    -----以上是四个元注解-------
    @SpringBootConfiguration  //表示当前类是一个配置类
        包含：元注解
              @Configuration  //配置类注解(表示被注解的类是一个配置类)
    @EnableAutoConfiguration //表示启用自动配置
    //注解扫描(扫描范围为Application.java启动类所在包及其子包)
    @ComponentScan(excludeFilters = {
            @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
            @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })

    注：SpringBoot并不是不需要写配置或注解了，它只是将其进行了封装，使我们使用起来更方便。



SpringBoot properties使用：
    https://blog.csdn.net/u012100371/article/details/78188541



SpringBoot配置数据源注意事项：
    数据源使用application.yml文件配置(注意url后面是否正确)
    格式：
    spring:
      datasource:
        url: jdbc:mysql://localhost:3306/spring_boot?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT
        username: root
        password: 123



多数据源的支持：//TODO
    同源数据库的多源支持
        日常项目中因为使用的分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置sping data jpa对多数据源的使用，
        一般分一下为三步：
            1 配置多数据源
            2 不同源的实体类放入不同包路径
            3 声明不同的包路径下使用不同的数据源、事务支持

            这里有一篇文章写的很清楚：Spring Boot多数据源配置与使用

    异构数据库多源支持
    比如我们的项目中，即需要对mysql的支持，也需要对mongodb的查询等。
    实体类声明@Entity 关系型数据库支持类型、声明@Document 为mongodb支持类型，不同的数据源使用不同的实体就可以了




单元测试：
    https://blog.csdn.net/sz85850597/article/details/80427408
    @RunWith(SpringRunner.class)  //SpringBoot与junit进行整合
    @SpringBootTest //1.当前类为SpringBoot的测试类   2.加在SpringBoot启动类，启动SpringBoot
    public class LearnServiceTest {

        @Autowired
        private UserService userService;

        @Test
        public void getLearn(){
            //测试
        }
    }



----------------------------- SpringBoot整合Servlet 三大组件 ---------------------------
SpringBoot整合Filter：
    1.新建一个XxxFilter 实现（implements）javax.servlet.Filter接口,并重写其中的方法
    2.通过注解方式配置过滤器
         在过滤器上添加WebFilter注解  @WebFilter(filterName = "sessionFilter",urlPatterns = {"/*"})
         在启动类添加ServletComponentScan注解
    2.通过过滤器注册配置类使用过滤器(将过滤器加入过滤器链)
         @Configuration
         public class WebComponent2Config {
             @Bean
             public FilterRegistrationBean someFilterRegistration1() {
                 //新建过滤器注册类
                 FilterRegistrationBean registration = new FilterRegistrationBean();
                 // 添加我们写好的过滤器
                 registration.setFilter( new SessionFilter());
                 // 设置过滤器的URL模式
                 registration.addUrlPatterns("/*");
                 return registration;
             }

         }
     3.设置过滤器执行顺序
         a.配置无法设置顺序，但是可以通过过滤器名字的字典顺序实现顺序过滤（比如AFilter就会在BFilter前执行），显然这种方法看起来不怎么正经。
         b.通过给注册类设置order，设置过滤器顺序(值越小执行优先级越高)
         registration.setOrder(1);


 SpringBoot整合Servlet:
    1.自定义XxxServelt继承HttpServlet，重写service方法(doGet,doPost)
    2.通过注解配置Servlet
        @WebServlet(name = "HelloServlet", urlPatterns = "/hello")
    3.启动类上添加@ServletComponentScan 扫描组件，然后注册

    配置类方式：
        2、3步使用配置类完成(自定义类名，方法名，返回ServletRegistrationBean，设置参数)
        @Configuration
        public class WebServletConfig {
            @Bean
            public ServletRegistrationBean getServletRegistrationBean(){
                ServletRegistrationBean bean = new ServletRegistrationBean(new HelloServlet());
                bean.addUrlMappings("/helloworld"); //相当于urlPatterns = "/helloworld"
                return bean;
            }
        }


SpringBoot整合Listener:
    1.新建自定义Listener类，实现任意监听器接口 如：ServletContextListener
    2.添加注解@WebListener  //只用添加这个注解就行了，不需要设置其他的，因为原始xml中也只是简单配置<filter-class></filter-class>
    3.启动类添加@ServletComponentScan  //扫描组建，并注册组件bean

    方式二：
     2、3通过配置类完成：
     @Configuration   //表示是一个配置类
     public class WebListenerConfig {
         @Bean
         public ServletListenerRegistrationBean getServletListenerRegistrationBean(){
             ServletListenerRegistrationBean bean = new ServletListenerRegistrationBean(new MyListener());
             return bean;
         }
     }




SpringBoot中使用Interceptor：
    1.自定义类XxxInterceptor实现HandlerInterceptor，重写方法，自定义类加@Compoent注解，表示被spring容器管理
        @Component
        public class MyInterceptor implements HandlerInterceptor {
            @Override
            public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
                System.out.println("自定义Interceprot...");
                return false;
            }
            ...
        }
    2.在入口类的目录或者兄弟目录下创建一个类继承WebMvcConfigurer类并重写addInterceptors方法
        @SpringBootConfiguration
        public class MySpringMvcConfig implements WebMvcConfigurer {
            @Autowired
            private MyInterceptor myInterceptor;  //拦截器

            @Override
            public void addInterceptors(InterceptorRegistry registry) {
                // registry.addInterceptor(testInterceptor).addPathPatterns("/hello"); //注册拦截器，并添加黑名单（可以是List类型）
                   registry.addInterceptor(testInterceptor).excludePathPatterns("/zero"); //白名单
            }
        }




自定义property
    1.配置在application.properties中
        com.neo.title=纯洁的微笑
        com.neo.description=分享生活和技术
    2.自定义配置类
         @Component
         public class NeoProperties {
            @Value("${com.neo.title}")
            private String title;
            @Value("${com.neo.description}")
            private String description;

            //省略getter settet方法
         }


       index:https://mp.weixin.qq.com/s?__biz=MzI4NDY5Mjc1Mg==&mid=2247483679&idx=1&sn=ce9ac5cdceac9e3abc1c10545401f2d4&chksm=ebf6d960dc81507667f3c1fc2c6ed445050a37309ff690b34e091d836a15e86d64a33f61d4f0&scene=21#wechat_redirect



log配置：   参见：https://blog.csdn.net/flysun3344/article/details/80555746
    日志级别总共有TARCE < DEBUG < INFO < WARN < ERROR < FATAL
    1.配置输出的地址(绝对路径)
        logging.path=C:/Users/Administrator/Downloads/SpringBootJPATest2018.12.22-master
    1.配置文件名（使用相对路径）
        logging.file=log/springbootlog

    2.配置输出级别（不同包下的日志可配置不同的级别）
        logging.level.com.favorites=DEBUG
        logging.level.org.springframework.web=INFO
        logging.level.org.hibernate=ERROR

    3.配置日志格式(控制台和文件中)
      logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n
      logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n

        %d{HH:mm:ss.SSS}——日志输出时间

        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用

        %-5level——日志级别，并且使用5个字符靠左对齐

        %logger- ——日志输出者的名字

        %msg——日志消息

        %n——平台的换行符




异常处理：
    1.自定义异常类，继承RuntimeException（spring事务在运行时抛出异常将会回滚）
    2.定义异常处理类
    @RestControllerAdvice
    public class MobaoExceptionHandler {

        @ExceptionHandler(RuntimeException.class)

        public Result<Void> MobaoException(){
            return new Result<Void>(0,"运行异常！");
        }
    }


SpringBoot AOP使用:
    @Aspect //表示一个切面类
    @Component
    public class HttpRequestAspect {
        private static final Logger log = LoggerFactory.getLogger(HttpRequestAspect.class);
        public static long startTime;
        public static long endTime;

        /**
         * @Pointcut 横切点，表示哪些方法需要被横切
         * 下面是切点表达式
         */
        //@Around("execution(* cn.tedu.store.service.impl.*.*(..))")
        @Pointcut("execution(public * cn.tedu.demo_1.controller.HelloController.*(..))")
        //切点签名
        public void print(){
            System.out.println("切点签名 print");
        }

        /*@Before注解表示在具体的方法之前执行*/
        @Before("print()")
        public void before(JoinPoint joinPoint) {
            log.info("前置切面before……");
            startTime = System.currentTimeMillis();
        }

        /*@After注解表示在方法执行之后执行*/
        @After("print()")
        public void after() {
            endTime = System.currentTimeMillis() - startTime;
            log.info("后置切面after……");
        }

        /*@AfterReturning注解用于获取方法的返回值*/
        @AfterReturning(pointcut = "print()", returning = "object")
        public void getAfterReturn(Object object) {
            log.info("本次接口耗时={}ms", endTime); //日志输出{}占位符
            log.info("afterReturning={}", object.toString());
        }



SpringBoot使用定时任务：
    blog地址： https://blog.csdn.net/wqh8522/article/details/79224290
    在线cron表达式生成：http://www.cronmaker.com/      站长工具：http://qqe2.com/cron/index

    1.使用Spring Task方式简单实现
        @Configuration
        @EnableScheduling //开启定时任务
        [@Async] //支持异步执行多个定时任务，需要配置
        public class SchedulingConfig {
            private final Logger logger = LoggerFactory.getLogger(getClass());

            //@Scheduled(cron = "0 0/10 * * * ?") // 每10分钟执行一次
            @Scheduled(fixedRate = 2000)
            public void getToken() {
                logger.info("getToken定时任务启动");
            }

            @Scheduled(fixedRate = 5000)
            public void otherToken() {
                logger.info("otherToken定时任务启动");
            }
        }

    异步配置类：
        /**
         * Spring Tast异步任务配置
         * 注： Tast类加上@Async注解 表明支持异步任务
         */
        @Configuration //表明该类是一个配置类
        @EnableAsync //开启异步事件的支持
        public class AsyncConfig {
            /*
        此处成员变量应该使用@Value从配置中读取
         */
            private int corePoolSize = 10;
            private int maxPoolSize = 200;
            private int queueCapacity = 10;

            @Bean
            public Executor tastExecutor(){
                ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
                executor.setCorePoolSize(corePoolSize);
                executor.setMaxPoolSize(maxPoolSize);
                executor.setQueueCapacity(queueCapacity);
                executor.initialize();
                return executor;
            }
        }

    说明：
        @Scheduled 参数可以接受两种定时的设置，一种是我们常用的cron="*/6 * * * * ?",一种是 fixedRate = 6000，两种都表示每隔六秒打印一下内容。
        fixedRate 说明
        @Scheduled(fixedRate = 6000) ：上一次开始执行时间点之后6秒再执行
        @Scheduled(fixedDelay = 6000) ：上一次执行完毕时间点之后6秒再执行
        @Scheduled(initialDelay=1000, fixedRate=6000) ：第一次延迟1秒后执行，之后按fixedRate的规则每6秒执行一次


    2.整合Quartz
        a.导入依赖
          <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-quartz</artifactId>
           </dependency>
        b.自定义TestQuartz类，继承QuartzJobBean,重写抽象方法，重写的方法中执行我们的定时任务。
            public class TestQuartz extends QuartzJobBean {
                @Override
                protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException {
                    System.out.println("Quartz Tast  " + new Date());
                }
            }
        c.定义QuartzConfig配置类
            @Configuration
            public class QuartzConfig {
                @Bean
                public JobDetail testQuartzDetail(){
                    return JobBuilder.newJob(TestQuartz.class).withIdentity("testQuartz").storeDurably().build();
                }

                @Bean
                public Trigger testQuartzTrigger(){
                    SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule()  //简单的计划
                            .withIntervalInSeconds(2)  //以秒为间隔 设置时间周期
                            .repeatForever(); //不断、永远重复
                    return TriggerBuilder.newTrigger().forJob(testQuartzDetail())
                            .withIdentity("testQuartz")
                            .withSchedule(scheduleBuilder)
                            .build();
                }

            }






--------------------------------------SpringBoot持久层操作--------------------------------------
数据库操作之SpringDataJpa：(MySQL + Spring Data JPA)
    1.添加jar包
         <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
            </dependency>
             <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
            </dependency>

    2.添加配置文件
        1.数据源配置
        spring.datasource.url=jdbc:mysql://localhost:3306/test
        spring.datasource.username=root
        spring.datasource.password=root
        spring.datasource.driver-class-name=com.mysql.jdbc.Driver

        2.其他配置(博客：https://mp.weixin.qq.com/s?__biz=MzI4NDY5Mjc1Mg==&mid=2247483679&idx=1&sn=ce9ac5cdceac9e3abc1c10545401f2d4&chksm=ebf6d960dc81507667f3c1fc2c6ed445050a37309ff690b34e091d836a15e86d64a33f61d4f0&scene=21#wechat_redirect)
        spring.jpa.properties.hibernate.hbm2ddl.auto=update    (四个取值create  create-drop  update  validata)   update最常用
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect   主要是指定生成表名的存储引擎为InneoDB
        spring.jpa.show-sql= true 是否打印出自动生产的SQL，方便调试的时候查看

        3.自定义实体类并且自动生成表
        @Entity
        @Table(name = "t_student") //指定表名
        public class Student {
            @Id
            @GeneratedValue
            private Integer id;
            @Column(nullable = false,unique = false, length = 20)
            private String stuName;
            @Column(nullable = false, length = 5)
            private String stuAge;
            //省略getXxx()/setXxx()方法

    3.自定XxxRepository类继承JpaRepositoty<实体类型, ID类型>
        Spring Data JPA 根据自动方法名生成sql语句
        自定义简单查询：
            根据方法名来自动生成SQL，主要的语法是findXXBy,readAXXBy,queryXXBy,countXXBy, getXXBy后面跟属性名称+sql类似的关键字
            eg:findByUsernameAndPassword    select* from username=?1 and password?2;

        复杂查询:
            在实际的开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义SQL
            a.分页查询：
                Page<User> findALL(Pageable pageable);   //在方法中传入参数Pageable,多个参数建议Pageable最后一个传入  注意导包别错了：org.springframework.data.domain.Page;
                Page<User> findByUserName(String userName,Pageable pageable);  //Pageable 是spring封装的分页实现类，使用的时候需要传入页数、每页条数和排序规则
                @Test
                public void testPageQuery() throws Exception {
                    int page=1,size=10;
                    Sort sort = new Sort(Direction.DESC, "id");
                    Pageable pageable = new PageRequest(page, size, sort);  //开始位置，每页条数，排序规则对象
                    userRepository.findALL(pageable);
                    userRepository.findByUserName("testName", pageable);
                }
            b.限制查询：//TODO

            c.自定义SQL语句查询：
                @Transactional(timeout = 10)  //支持事务[设置超时]
                @Modifying //涉及增删使用
                @Query("delete from User where id = ?1") //涉及查询时使用

                //自定义sql查询 (原生sql查询)
                //@Transactional(timeout = 10)
                @Query(nativeQuery = true, value = "select id,stu_age,stu_name from t_student where stu_name = ?1 and stu_age=?2")
                Student findStu(String stuName,String age); //参数名与实体类属性一致

                //自定义修改操作
                @Transactional  //一定要添加事务 否则抛:TransactionRequiredException
                @Modifying  //删除，修改一定要加次注解
                @Query(nativeQuery = true, value = "update t_student set stu_age=?1 where id=?2")  //使用原生sql查询
                Integer updateAgeById(String stuAge, Integer id);
                
                注意：SpringDataJPA默认使用HQL语句，若使用原生SQL语句，在@Query注解中添加nativeQuery = true 属性

            d.多表查询:
                首先需要定义一个结果集的接口类
                    public interface HotelSummary {
                        City getCity();
                        String getName();
                        Double getAverageRating();
                        default Integer getAverageRatingRounded() {
                                return getAverageRating() == null ? null : (int) Math.round(getAverageRating());
                        }
                    }
                查询的方法返回类型设置为新创建的接口
                    @Query("select h.city as city, h.name as name, avg(r.rating) as averageRating "
                            - "from Hotel h left outer join h.reviews r where h.city = ?1 group by h")
                    Page<HotelSummary> findByCity(City city, Pageable pageable);

                    @Query("select h.name as name, avg(r.rating) as averageRating "
                            - "from Hotel h left outer join h.reviews r  group by h")
                    Page<HotelSummary> findByCity(Pageable pageable);

                注：在运行中Spring会给接口（HotelSummary）自动生产一个代理类来接收返回的结果，代码汇总使用getXX的形式来获取




数据库操作之MyBatis：(MySQL + MyBatis)
    1.添加spring boot 的 mybatis jar包依赖
         <dependency>
                    <groupId>org.mybatis.spring.boot</groupId>
                    <artifactId>mybatis-spring-boot-starter</artifactId>
                    <version>1.3.2</version>
         </dependency>
    2.配置数据源(同上)
    3.启动类配置@MapperScan(basePackages = "cn.tedu.demo_1.repository") //或者在每个持久层接口添加@Mapper也可以，但是很麻烦。
    4.使用注解配置映射关系，接口方法上使用对应注解写sql语句（@Select @Update ...）  //或者是使用传统xml映射文件，可以灵活的动态生成sql,方便调整SQL语句,适合大型项目
                                                              // 注解适合简单快速模式，尤其是为微服务模式，一个服务就对应一个自己的数据库，多表查询需求会大大降低。
       eg： @Select("SELECT * FROM users WHERE id = #{id}")
              @Results({
                  @Result(property = "userSex",  column = "user_sex", javaType = UserSexEnum.class),
                  @Result(property = "nickName", column = "nick_name")
              })
              UserEntity getOne(Long id);

    4.使用传统xml配置实体与数据库字段映射
           a.在application.properties文件中指定mybatis基础配置文件和实体类映射文件地址
                mybatis.config-locations=classpath:mybatis/mybatis-config.xml  配置类的别名，不用写完全限定名了
                mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
           b.添加mybatis-config.xml与*.xml配置文件即可，详细见代码。

     注意：#{} 等价于 sql模板中的？     select * from user id = ?;
           ${} 直接做拼接操作，涉及表字段值用这个,有sql注入风险








SpringBoot email(发送邮件):
    Blog:https://mp.weixin.qq.com/s?__biz=MzI4NDY5Mjc1Mg==&mid=2247483722&idx=1&sn=5be558e8636687ff653a51c97f5ec0c4&chksm=ebf6d935dc8150231f7d2001f5d1e512a7df1f5325eb6e1857b2b3756560a20587ea92425250&scene=21#wechat_redirect

    1.设置POP3/SMTP/IMAP， 勾选
    2.设置授权码，授权码是用于登录第三方邮件客户端的专用密码。
    3.properties配置文件中配置
        #邮件配置
        #邮箱服务器地址
        spring.mail.host=smtp.163.com
        #邮箱用户名
        spring.mail.username=skwangxu@163.com
        #此处指的是授权码，不是登录密码
        spring.mail.password=wx18227327313
        spring.mail.default-encoding=utf-8
        #以谁来发送邮件
        mail.fromMail.addr=skwangxu@163.com
    4.实现发送
        @RestController
        public class EmailController {
            @Autowired
            private JavaMailSender javaMailSender;

            @Value("${mail.fromMail.addr}") //从properties中获取属性值
            private String from;

            @GetMapping("send")
            public String sendEmail(){
                System.out.println(from);
                SimpleMailMessage message = new SimpleMailMessage();
                //发送者
                message.setFrom(from);
                //接收者
                message.setTo("593464677@qq.com");
                //主题(标题)
                message.setSubject("放假通知!");
                //内容
                message.setText("2019年1月10日放假！");  //发送html，发送html格式源码
                javaMailSender.send(message);
                return  "send success!";
            }
        }







Thymeleaf模板
    //TODO

Gradle 构建工具
    //TODO


什么是WebJars
    什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。
    如何使用
    1、 WebJars主官网 查找对于的组件，比如Vuejs
    <dependency>
        <groupId>org.webjars.bower</groupId>
        <artifactId>vue</artifactId>
        <version>1.0.21</version>
    </dependency>
    2、页面引入
    <link th:href="@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}" rel="stylesheet"></link>
    就可以正常使用了！



GoDaddy




